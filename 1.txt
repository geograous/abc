昨天 （周四）
1.  封装小程序播放和推流组件
今天（周五）
1.  编写小程序组件测试项目

播放器状态改变
event_id: 32
event_name: "WechatPlayerStatus"
status_code: 2002

播放器网络状态统计信息
event_id: 33
event_name: "WechatPlayerStatistics"
video_bitrate: 0
audio_bitrate: 0
video_fps: 0
video_gop: 0
net_speed: 0
net_jitter: 0
video_width: 0
video_height: 0

推流器状态改变
event_id: 34
event_name: "WechatPusherStatus"
status_code: 1002

推流器网络状态统计信息
event_id: 35
event_name: "WechatPusherStatistics"
video_bitrate: 0
audio_bitrate: 0
video_fps: 0
video_gop: 0
net_speed: 0
net_jitter: 0
video_width: 0
video_height: 0

昨天 （周三）
1.  验证小程序组件的重连和打点
今天（周四）
1.  修复h5牛会议 断网重连bug


实现一个函数 var urlObject = parseUrl(url)，将一段 url 字符串解析为 Object

  例如：

```js
var url = 'https://www.qiniu.com/products/qcdn?entry=index&ts=1585703058520#feature';
var urlObject = parseUrl(url);
console.log(urlObject);
```

输出结果为：

```js
{
  protocol: "https",
  host: "www.qiniu.com",
  path: "/products/qcdn",
  params: {
    entry: "index",
    ts: "1585703058520"
  },
  hash: "feature"
}
```

### 数组去重

```js
function dedupe(arr) {
  // ...
}

dedupe([1, 3, 2, 1, 2]) // [1, 3, 2]
// 1. === 则认为重复 2. 保持原数组顺序
// 考虑字符串？
// 考虑复杂结构？
// 不使用 Set/Map？ Or 考虑怎么去 polyfill Set/Map
```

### 移除元素

```js
var remove = function(vals, val) {

}

const arr = [1, 2, 3, 2, 2]
const len = remove(arr, 2)
for (let i = 0; i < len; i++) {
  console.log(arr[i])
}
// 1, 3
```

小程序
react
vue
mse

js 语言
nodejs 
小程序框架
vue 的使用心得
react
typescript

js模块化规范
浏览器微任务、宏任务

移动端适配flexbox，文字展示
移动端 css 
hash history
window.location

vue-router

现状：
老官网使用 ruby 技术栈，其中前端部分使用 ruby on rails。后端部分使用 ruby 接口，部分数据来自 CMS 系统。

存在的不足：
1.通过 ruby 进行渲染，技术栈和 portal 项目有较大差异，不好维护。

解决方法：
1.使用团队熟悉的 react 框架
2.使用 JAMStack 技术栈

JAMStack 简介 https://jamstack.org/ 。
优势：高性能、易扩展、高安全性、友好的开发体验

使用框架：next.js
主流的框架有 next.js 和 gatsby.js 。gatsby.js 官网中有两者的对比 https://www.gatsbyjs.org/features/jamstack/。
但是 gatsby.js 框架的特点是大而全，使用起来也比较繁琐。next.js 的开发体验相对而言简单一些，而且成名较早，有更多的成功案例。

开发部署流程：
1.本地开发完页面
2.进行代码格式校验、单元测试
3.校验完成后上传代码到 bucket，刷新 CDN

新老官网内容的隔离：
1.老官网的接口也页面域名设置为 legacy-www.qiniu.com
2.调用老接口通过 proxy 来实现
3.访问老官网中特有的页面通过在 bucket 中设置镜像回源，源站的地址为 legacy-www.qiniu.com

针对 CMS 系统动态生成的内容：
一期暂时不做。以后的方案可以尝试定期爬取 CMS 的页面，后者爬取数据用定制的模版渲染生成新的页面，部署到 bucket 中。

后端接口：复用活动页的 proxy 代理到 mars、sso、gaea 等服务

全文检索：使用自己开发的 es 服务

为什么不用第三方方案：第三方服务收钱、有很多限制，不如自研稳定

ssh zhuhao@10.20.34.27

qssh vdn-gddg-dls-1-5

docker login reg.qiniu.com -u pili-coresdk@qiniu.com -p Pili@2016

/Users/zhuhao/projects/qiniu/rtndoc/rtn/website/build/QNRTC
scp -r /Users/zhuhao/projects/qiniu/rtndoc/rtn/website/build/QNRTC zhuhao@10.20.34.27:/home/zhuhao/build
scp -r /Users/zhuhao/tmp/QNRTC-Linux zhuhao@10.20.34.27:/home/zhuhao/build/QNRTC-Linux
/Users/zhuhao/tmp/QNRTC-Windows
qscp -r /home/zhuhao/build/QNRTC-Linux vdn-gddg-dls-1-5:/home/hermes/sdkdoc/env_prod/QNRTC-Linux

/home/hermes/sdkdoc/env_prod

function test() {
  try {
    console.log('try')
    try {
      console.log('try try')
    } finally {
      console.log('try finally')
    }
    return 'ccc'
  } finally {
    console.log('finally')
  }
}

HTML/CSS
* css盒模型，flex box
* css优先级
* css命名空间污染、CSS Module
* 页面渲染基本过程
* 事件模型

JS/TS
* 基础语法
* this指针
* 深拷贝
* JS异步与事件循环
* JS垃圾回收机制
* ES6+语法：let，const，async…await，class，箭头函数，…

框架
* React: 生命周期，HOC，PureComponent与Component，Diff，React 16+新特性
* Angular: 生命周期，脏检测
* Vue: 生命周期

状态管理
* Redux：数据流向与工作流程，如何处理异步状态变更，thunk、saga相关
* Mobx：数据流向与工作流程，理解reaction

前端工程化
* npm包管理
* Webpack：code split，dynamic import
* git使用
* 死锁，中断

浏览器
*跨域
*存储，cookies, localStorage, sessionStorage
*同源限制
*浏览器API
*调试工具

其它Web知识
* 性能优化
* Http协议基础知识
* xss与csrf
* 数据可视化: svg，canvas，d3.js，echarts.js，highcharts.js

经验
实习经验
公司、部门、岗位、参与项目、汇报对象、留用情况（若应届生，有无留用机会，为什么还出来看机会）、收获、总结

项目经验
目标/成果，团队协作情况，自身在团队的角色，自身工作对项目的帮助，遇到问题与解决思路、方案，收获、总结/复盘

作品/成果
自己开发软件/项目/作品成果，做过的研究，论文的发布，代码展示，专利申请

潜力
学习能力
好奇心、对新事物的接受度、思考深度、快速学习后解决问题的能力、举一反三

沟通协作
换位思考，表达能力，与他人/团队/跨团队的协作，矛盾的处理

解决问题能力
自觉地确定目的，并根据目的来支配、调节自己的行动，克服各种困难，从而实现目的

首页
搜索

64 天

平台概览 14
  - 卡片 2
  - 图表 3 * 4
应用列表 32
  - 应用列表 2
    - 创建应用 2
  - 应用详情
    - 应用配置 5
    - 活跃房间 5
    - 数据概览 8
    - 质量分析 10
房间列表 13
  - 房间列表 2
  - 详情 5
    - 音频 3
    - 视频 3
用量统计 5



性能优化
图片懒加载
请求预先加载
base64 本地
文件抽离
dns-prefetch

webpack打包 loader 
code split

打包
文件抽取 影响性能

dns

官网设计资源 https://lanhuapp.com/web/#/item?cid=&fid=all&tid=63281af8-3e93-4c88-9659-8d16668dc07d
https://cf.qiniu.io/pages/viewpage.action?pageId=39834528
https://cf.qiniu.io/pages/viewpage.action?pageId=39839187

var num = '10000000000000',
    reg = /(?=(\B)(\d{3})+$)/g;
 
//每三位加','号
console.log(num.replace(reg,','))
//10,000,000,000,000
 
//其他符号只需更改replace()第二个参数即可

11000...11015
10052 server unavailable
20001 deviceManager auto switch error
30001 websocket abort


关于错误异常的相关处理，都应在该回调中完成; 需要处理的错误码及建议处理逻辑如下:
           
【TOKEN 相关】
  1. QNRTCErrorTokenError [10001] 您提供的 token 出现了错误；
 关于 token 签算规则, 详情请参考【服务端开发说明.RoomToken 签发服务】https://doc.qnsdk.com/rtn/docs/server_overview#1    
  2. QNRTCErrorTokenExpired [10002] 您提供的 token 已过期, 需要生成可用的 token，再重新加入房间；
           
【房间设置相关】以下情况可以与您的业务服务开发确认下具体的设置
  1. QNRTCErrorRoomIsFull [10011] 当房间已加入人数超过每个房间的人数限制，请与后台服务确认该设置；
  2. QNRTCErrorUserAlreadyExist [10022] 后台如果配置为开启【禁止自动踢人】,则同一用户重复加入/未正常退出再加入，您的业务可根据实际情况选择配置；
  3. QNRTCErrorNoPermission [10051] 用户对于特定操作，如合流需要配置权限，禁止出现未授权的用户操作；
  4. QNRTCErrorRoomClosed [10003, 10005, 10012] 房间已被管理员关闭；
  

10006 你被踢出房间
  10021 用户不存在
  10031 发布的流不存在
  10032 发布的流的信息不匹配
  10033 发布的流已经存在
  10034 发布的流还未准备好
  10041 订阅的流已经存在
  10042 订阅的流信息不匹配
  10043 订阅的流已经存在
  10044 不能订阅自己
  10051 没有权限
  10052 服务器错误
           
【其他错误】
  1. QNRTCErrorAuthFailed 服务验证时出错，可能为服务网络异常。建议重新尝试加入房间；      
  2. QNRTCErrorPublishFailed 发布失败, 会有如下3种情况:
     1 ）请确认成功加入房间后，再执行发布操作
     2 ）请确定对于音频/视频 Track，分别最多只能有一路为 master
     3 ）请确认您的网络状况是否正常
            
  3. QNRTCErrorReconnectTokenError [10004] 内部重连后出错，一般出现在网络非常不稳定时出现，建议提示用户并尝试重新加入房间；
  4. QNRTCErrorInvalidParameter 服务交互参数错误，请在开发时注意合流、踢人动作等参数的设置。



switch (error.code) {
        case QNRTCErrorAuthFailed:
            NSLog(@"鉴权失败，请检查鉴权");
            break;
        case QNRTCErrorRoomIsFull:
            NSLog(@"房间人数已满");
            break;
        case QNRTCErrorTokenError:
            //关于 token 签算规则, 详情请参考【服务端开发说明.RoomToken 签发服务】https://doc.qnsdk.com/rtn/docs/server_overview#1   
            NSLog(@"roomToken 错误");
            break;
        case QNRTCErrorTokenExpired:
            NSLog(@"roomToken 过期");
            break;
        case QNRTCErrorUserAlreadyExist:
            NSLog(@"用户已存在");
            break;
        case QNRTCErrorNoPermission:
            NSLog(@"请检查用户是否有权限，如:合流");
            break;
        case QNRTCErrorReconnectTokenError:
            NSLog(@"重新进入房间超时，请务必调用 leaveRoom, 重新进入房间");
            break;
        case QNRTCErrorPublishFailed:
            NSLog(@"发布失败，请查看是否加入房间，并确定对于音频/视频 Track，分别最多只能有一路为 master");
            break;
        case QNRTCErrorInvalidParameter:
            NSLog(@"服务交互参数错误，请在开发时注意合流、踢人动作等参数的设置");
            break;
        case QNRTCErrorRoomClosed:
            NSLog(@"房间已被管理员关闭");
            break;
            
        default:
            break;
    }




